import java.util.Scanner;

public class Min_Max {
    public static void printBoard(char[][] board) {
        for (char[] row : board) {
            for (char cell : row) {
                System.out.print(cell + " | ");
            }
            System.out.println();
            System.out.println("---------");
        }
    }

    public static boolean isWinner(char[][] board, char player) {
        for (int i = 0; i < 3; i++) {
            if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
                (board[0][i] == player && board[1][i] == player && board[2][i] == player)) {
                return true;
            }
        }
        return (board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
               (board[0][2] == player && board[1][1] == player && board[2][0] == player);
    }

    public static boolean isFull(char[][] board) {
        for (char[] row : board) {
            for (char cell : row) {
                if (cell == ' ') {
                    return false;
                }
            }
        }
        return true;
    }

    public static int minimax(char[][] board, int depth, boolean maximizingPlayer) {
        if (isWinner(board, 'O')) {
            return 1;
        } else if (isWinner(board, 'X')) {
            return -1;
        } else if (isFull(board)) {
            return 0;
        }

        if (maximizingPlayer) {
            int maxEval = Integer.MIN_VALUE;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == ' ') {
                        board[i][j] = 'O';
                        int eval = minimax(board, depth + 1, false);
                        board[i][j] = ' ';
                        maxEval = Math.max(maxEval, eval);
                    }
                }
            }
            return maxEval;
        } else {
            int minEval = Integer.MAX_VALUE;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == ' ') {
                        board[i][j] = 'X';
                        int eval = minimax(board, depth + 1, true);
                        board[i][j] = ' ';
                        minEval = Math.min(minEval, eval);
                    }
                }
            }
            return minEval;
        }
    }

    public static int[] bestMove(char[][] board) {
        int bestVal = Integer.MIN_VALUE;
        int[] move = {-1, -1};

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    board[i][j] = 'O';
                    int moveVal = minimax(board, 0, false);
                    board[i][j] = ' ';

                    if (moveVal > bestVal) {
                        bestVal = moveVal;
                        move[0] = i;
                        move[1] = j;
                    }
                }
            }
        }
        return move;
    }

    public static void main(String[] args) {
        char[][] board = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
        char currentPlayer = 'X';

        Scanner scanner = new Scanner(System.in);

        while (true) {
            printBoard(board);

            if (currentPlayer == 'X') {
                System.out.print("Enter the row (0, 1, or 2): ");
                int row = scanner.nextInt();
                System.out.print("Enter the column (0, 1, or 2): ");
                int col = scanner.nextInt();

                if (board[row][col] == ' ') {
                    board[row][col] = 'X';
                } else {
                    System.out.println("Invalid move. Cell already occupied. Try again.");
                    continue;
                }
            } else {
                int[] move = bestMove(board);
                board[move[0]][move[1]] = 'O';
            }

            if (isWinner(board, currentPlayer)) {
                printBoard(board);
                System.out.println(currentPlayer + " wins!");
                break;
            } else if (isFull(board)) {
                printBoard(board);
                System.out.println("It's a tie!");
                break;
            }

            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        }
    }
}
