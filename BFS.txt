import java.util.*;

class BFS {
    private int V; // Number of vertices
    private List<Integer>[] adj_list; // Adjacency list representation

    BFS(int v) {
        V = v;
        adj_list = new ArrayList[V];
        for (int i = 0; i < V; ++i)
            adj_list[i] = new ArrayList<>();
    }

    // Add an edge to the graph
    void addEdge(int v, int w) {
        adj_list[v].add(w);
        
    }

    void BFS(int startNode, int destNode) {
        boolean[] visited = new boolean[V];
        Queue<Integer> queue = new LinkedList<>();
        int[] parent = new int[V];

        visited[startNode] = true;
        queue.add(startNode);

        while (!queue.isEmpty()) 
        {
            int currentNode = queue.poll();

            for (Integer neighbor : adj_list[currentNode]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                    parent[neighbor] = currentNode;
                    if (neighbor == destNode) {
                        break;
                    }
                }
            }
        }
        
        
        //to find parent and print path....
        System.out.print("BFS Path: ");
        Stack<Integer> path = new Stack<>();
        int current = destNode;
        while (current != startNode) 
        {
            path.push(current);
            current = parent[current];
        }
        path.push(startNode);

        while (!path.isEmpty()) 
        {
            System.out.print(path.pop() + " ");
        }
        System.out.println();

        //System.out.println("No path exists between the specified nodes.");
    }

    

    public static void main(String args[]) {
        BFS graph = new BFS(6);

        // Define the fixed graph with 6 nodes and 7 edges (including a loop)
        graph.addEdge(0, 2);
        graph.addEdge(0, 1);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);
        graph.addEdge(3, 5);
        graph.addEdge(4, 1); // Creating a loop
        graph.addEdge(4, 5);

        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter the starting node (0 to 5):");
        int startNode = scanner.nextInt();

        System.out.println("Enter the destinatioan node (0 to 5):");
        int destNode = scanner.nextInt();
        graph.BFS(startNode, destNode);
        
    }
}
