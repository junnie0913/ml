import java.util.*;

public class Astar_alg {
    static final int[][] goalState = {{1, 7, 6}, {2, 0, 5}, {3, 8, 4}};
    static final int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    static int calculateHeuristic(int[][] board) {
        int heuristic = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] != 0) {
                    int value = board[i][j] - 1;
                    int targetRow = value / 3;
                    int targetCol = value % 3;
                    heuristic += Math.abs(targetRow - i) + Math.abs(targetCol - j);
                }
            }
        }
        return heuristic;
    }

    static List<int[][]> getNeighbors(int[][] board) {
        List<int[][]> neighbors = new ArrayList<>();
        int zeroRow = -1, zeroCol = -1;

        outerloop:
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 0) {
                    zeroRow = i;
                    zeroCol = j;
                    break outerloop;
                }
            }
        }

        for (int[] dir : directions) {
            int newRow = zeroRow + dir[0];
            int newCol = zeroCol + dir[1];

            if (newRow >= 0 && newRow < 3 && newCol >= 0 && newCol < 3) {
                int[][] newBoard = new int[3][3];
                for (int i = 0; i < 3; i++) {
                    newBoard[i] = Arrays.copyOf(board[i], 3);
                }
                newBoard[zeroRow][zeroCol] = newBoard[newRow][newCol];
                newBoard[newRow][newCol] = 0;
                neighbors.add(newBoard);
            }
        }
        return neighbors;
    }

    static List<int[][]> solvePuzzle(int[][] initialBoard) {
        PriorityQueue<int[][]> openSet = new PriorityQueue<>(Comparator.comparingInt(board ->
                calculateHeuristic(board) + countNonMatchingTiles(board, goalState)));

        Set<String> visited = new HashSet<>();
        openSet.add(initialBoard);

        Map<String, int[][]> prevMap = new HashMap<>();
        prevMap.put(Arrays.deepToString(initialBoard), null);

        while (!openSet.isEmpty()) {
            int[][] current = openSet.poll();

            if (Arrays.deepEquals(current, goalState)) {
                List<int[][]> solution = new ArrayList<>();
                while (current != null) {
                    solution.add(0, current);
                    current = prevMap.get(Arrays.deepToString(current));
                }
                return solution;
            }

            visited.add(Arrays.deepToString(current));

            List<int[][]> neighbors = getNeighbors(current);
            for (int[][] neighbor : neighbors) {
                if (!visited.contains(Arrays.deepToString(neighbor))) {
                    openSet.add(neighbor);
                    prevMap.put(Arrays.deepToString(neighbor), current);
                }
            }
        }

        return null; // No solution found
    }

    static int countNonMatchingTiles(int[][] board1, int[][] board2) {
        int count = 0;
        for (int i = 0; i < board1.length; i++) {
            for (int j = 0; j < board1[0].length; j++) {
                if (board1[i][j] != board2[i][j]) {
                    count++;
                }
            }
        }
        return count;
    }

    public static void main(String[] args) {
        int[][] initialBoard = {
                {1, 0, 7},
                {2, 8, 6},
                {3, 4, 5}
        };

        List<int[][]> solution = solvePuzzle(initialBoard);

        if (solution != null) {
            System.out.println("Solution Steps:");
            for (int[][] board : solution) {
                for (int[] row : board) {
                    System.out.println(Arrays.toString(row));
                }
                System.out.println();
            }
        } else {
            System.out.println("No solution found.");
        }
    }
}
